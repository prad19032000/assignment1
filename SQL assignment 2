create database practise;

use practise;
select * from city_table;

-- Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.

select * from city_table
where countrycode='USA' 
and population>100000;

-- Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.

select name from city_table
where countrycode='USA' 
and population>120000;

-- Q3. Query all columns (attributes) for every row in the CITY table.

select * from city_table;

-- Q4. Query all columns for a city in CITY with the ID 1661.

select * from city_table
where id=1661;

-- Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

select * from city_table
where countrycode = 'JPN';

-- Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

select name from city_table
where countrycode = 'JPN';

-- Q7. Query a list of CITY and STATE from the STATION table.

select city,state
from stations;

-- Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

select distinct city 
from stations
where id % 2=0;

-- Q9. Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

select count(city)-count(distinct city) 
as Difference 
from stations;

-- Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their
-- respective lengths (i.e.: number of characters in the name). If there is more than one smallest or
-- largest city, choose the one that comes first when ordered alphabetically.

-- Ans:for shortest length of city names
select city, length(city) as shortest_len 
from stations 
order by shortest_len,city 
limit 1;
-- Ans: for longest length of city names
select city, length(city) as longest_len 
from stations 
order by longest_len desc ,city
limit 1;

-- Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

select distinct city
from stations 
where city like 'a%' or city like'e%' or city like 'i%' or city like'o%' or city like 'u%';

-- Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

select distinct city
from stations 
where city like '%a' or city like'%e' or city like '%i' or city like'%o' or city like '%u';

-- Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

select distinct city from stations
where city regexp '^[^aeiou]';

-- Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

select distinct city from stations
where city regexp '[^aeiou]$';

-- Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

select distinct city from stations
where city regexp '^[^aeiou]' or city regexp '[^aeiou]$';

-- Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

select distinct city from stations
where city regexp '^[^aeiou]' and city regexp '[^aeiou]$';

-- Q17.

use practise;
create table product(
product_id int primary key,
product_name varchar(25),
unit_price int);

create table sales(
seller_id int,
product_id int,
buyer_id int,
sale_date date,
quantity int,
price int,
foreign key (product_id) references product(product_id)
);

insert into product values(1,'S8',1000),
(2,'G4',800),
(3,'iPhone',1400);

insert into sales values(1,1,1,'2019/01/21',2,2000),
(1,2,2,'2019/02/17',1,800),
(2,2,3,'2019/02/02',1,800),
(3,3,4,'2019/05/13',2,2800);

-- Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is, between 2019-01-01 and 2019-03-31 inclusive.

select p.product_id,p.product_name from product p
inner join sales s
on p.product_id=s.product_id
where sale_date between '2019-01-01' and '2019-03-31'
group by product_id;

-- Q18.

use practise;
create table views(
article_id int,
author_id int,
viewer_id int,
view_date date);

INSERT INTO Views (article_id, author_id, viewer_id, view_date)
VALUES
    (1, 3, 5, '2019-08-01'),
    (1, 3, 6, '2019-08-02'),
    (2, 7, 7, '2019-08-01'),
    (2, 7, 6, '2019-08-02'),
    (4, 7, 1, '2019-07-22'),
    (3, 4, 4, '2019-07-21'),
    (3, 4, 4, '2019-07-21');

-- Write an SQL query to find all the authors that viewed at least one of their own articles.
-- Return the result table sorted by id in ascending order.

SELECT DISTINCT author_id AS id
FROM Views
WHERE author_id = viewer_id
order by id;

-- Q 19.

use practise;
CREATE TABLE orders (
    delivery_id INT,
    customer_id INT,
    order_date DATE,
    customer_pref_delivery_date DATE
);

INSERT INTO orders (delivery_id, customer_id, order_date, customer_pref_delivery_date)
VALUES
    (1, 1, '2019-08-01', '2019-08-02'),
    (2, 5, '2019-08-02', '2019-08-02'),
    (3, 1, '2019-08-11', '2019-08-11'),
    (4, 3, '2019-08-24', '2019-08-26'),
    (5, 4, '2019-08-21', '2019-08-22'),
    (6, 2, '2019-08-11', '2019-08-13');

SELECT ROUND((SELECT COUNT(*) 
FROM orders 
WHERE order_date = customer_pref_delivery_date) / COUNT(*) * 100, 2) 
AS immediate_percentage
FROM orders;

-- Q 20.

CREATE TABLE ads(
    ad_id INT,
    user_id INT,
    action ENUM('Clicked', 'Viewed', 'Ignored'),
    PRIMARY KEY (ad_id, user_id)
);

INSERT INTO ads (ad_id, user_id, action)
VALUES
    (1, 1, 'Clicked'),
    (2, 2, 'Clicked'),
    (3, 3, 'Viewed'),
    (5, 5, 'Ignored'),
    (1, 7, 'Ignored'),
    (2, 7, 'Viewed'),
    (3, 5, 'Clicked'),
    (1, 4, 'Viewed'),
    (2, 11, 'Viewed'),
    (1, 2, 'Clicked');
    
SELECT ad_id, ROUND(IFNULL(
               (SUM(CASE WHEN action = 'Clicked' THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN action IN ('Clicked', 'Viewed') THEN 1 ELSE 0 END), 0)) * 100,0
           ),2) AS ctr FROM Ads
WHERE action IN ('Clicked', 'Viewed')
GROUP BY ad_id
ORDER BY ctr DESC, ad_id ASC;

-- Q 21.

create table employee(
employee_id int primary key,
team_id int
);

INSERT INTO employee (employee_id, team_id)
VALUES
    (1, 8),
    (2, 8),
    (3, 8),
    (4, 7),
    (5, 9),
    (6, 9);

SELECT employee_id, 
(SELECT COUNT(*) FROM employee WHERE team_id = e.team_id) AS team_size
FROM employee e;

-- Q 22.
create table countries(
country_id int primary key,
country_name varchar(25)
);

create table weather(
country_id int,
weather_state int,
day date,
primary key(country_id,day) 
);   

INSERT INTO Countries (country_id, country_name)
VALUES
    (2, 'USA'),
    (3, 'Australia'),
    (7, 'Peru'),
    (5, 'China'),
    (8, 'Morocco'),
    (9, 'Spain');

INSERT INTO Weather (country_id, weather_state, day)
VALUES
    (2, 15, '2019-11-01'),
    (2, 12, '2019-10-28'),
    (2, 12, '2019-10-27'),
    (3, -2, '2019-11-10'),
    (3, 0, '2019-11-11'),
    (3, 3, '2019-11-12'),
    (5, 16, '2019-11-07'),
    (5, 18, '2019-11-09'),
    (5, 21, '2019-11-23'),
    (7, 25, '2019-11-28'),
    (7, 22, '2019-12-01'),
    (7, 20, '2019-12-02'),
    (8, 25, '2019-11-05'),
    (8, 27, '2019-11-15'),
    (8, 31, '2019-11-25'),
    (9, 7, '2019-10-23'),
    (9, 3, '2019-12-23');
    
select c.country_name,
case when avg(w.weather_state)<=15 then 'cold'
when avg(w.weather_state)>=25 then 'hot'
else 'warm' end as weather_type
from countries c
join weather w on w.country_id=c.country_id 
where day between '2019-11-01' and '2019-11-30'
group by w.country_id;
	
-- Q23.
use practise;
select * from prices;
select * from unitssold;

select u.product_id,round(sum(u.units*p.price)/sum(u.units),2) as average_price
from unitssold u join prices p
on p.product_id=u.product_id where purchase_date between start_date and end_date
group by product_id;
   
 -- Q24.   
 CREATE TABLE Activity (
    player_id INT,
    device_id INT,
    event_date DATE,
    games_played INT,
    PRIMARY KEY (player_id, event_date)
);

INSERT INTO Activity (player_id, device_id, event_date, games_played)
VALUES
    (1, 2, '2016-03-01', 5),
    (1, 2, '2016-05-02', 6),
    (2, 3, '2017-06-25', 1),
    (3, 1, '2016-03-02', 0),
    (3, 4, '2018-07-03', 5);

select player_id, min(event_date) AS first_login
from Activity
group by player_id;

-- Q25.
select * from activity;
    
SELECT a.player_id, a.device_id
FROM Activity a
JOIN (
    SELECT player_id, MIN(event_date) AS first_login_date
    FROM Activity
    GROUP BY player_id
) first_logins ON a.player_id = first_logins.player_id AND a.event_date = first_logins.first_login_date;

-- Q26.
use my_db;
create table products(
product_id int primary key,
product_name varchar(25),
product_category varchar(25)
);
create table orders(
product_id int,
order_date date,
unit int,
foreign key(product_id) references products(product_id)
);

INSERT INTO Products (product_id, product_name, product_category)
VALUES
    (1, 'Leetcode Solutions', 'Book'),
    (2, 'Jewels of Stringology', 'Book'),
    (3, 'HP', 'Laptop'),
    (4, 'Lenovo', 'Laptop'),
    (5, 'Leetcode Kit', 'Clothing');

INSERT INTO Orders (product_id, order_date, unit)
VALUES
    (1, '2020-02-05', 60),
    (1, '2020-02-10', 70),
    (2, '2020-01-18', 30),
    (2, '2020-02-11', 80),
    (3, '2020-02-17', 2),
    (3, '2020-02-24', 3),
    (4, '2020-03-01', 20),
    (4, '2020-03-04', 30),
    (4, '2020-03-04', 60),
    (5, '2020-02-25', 50),
    (5, '2020-02-27', 50),
    (5, '2020-03-01', 50);

select p.product_name,sum(o.unit) as unit
from products p
join orders o
on p.product_id=o.product_id
where month(o.order_date)=2 
group by p.product_name
having sum(o.unit)>=100;

-- Q27.
create table users(
user_id int primary key,
name varchar(25),
mail varchar(25));

INSERT INTO Users (user_id, name, mail)
VALUES
    (1, 'Winston', 'winston@leetcode.com'),
    (2, 'Jonathan', 'jonathanisgreat'),
    (3, 'Annabelle', 'bella-@leetcode.com'),
    (4, 'Sally', 'sally.come@leetcode.com'),
    (5, 'Marwan', 'quarz#2020@leetcode.com'),
    (6, 'David', 'david69@gmail.com'),
    (7, 'Shapiro', '.shapo@leetcode.com');

select * from users
where mail 
regexp'^[A-Za-z][A-Za-z0-9._-]*@leetcode.com';

-- Q28.
-- creating different database as these table names already exists
create database test;
use test;
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(255),
    country VARCHAR(255)
);

INSERT INTO Customers (customer_id, name, country)
VALUES
    (1, 'Winston', 'USA'),
    (2, 'Jonathan', 'Peru'),
    (3, 'Moustafa', 'Egypt');

CREATE TABLE Product (
    product_id INT PRIMARY KEY,
    description VARCHAR(255),
    price DECIMAL(10, 2));

INSERT INTO Product (product_id, description, price)
VALUES
    (10, 'LC Phone', 300),
    (20, 'LC T-Shirt', 10),
    (30, 'LC Book', 45),
    (40, 'LC Keychain', 2);
    
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    order_date DATE,
    quantity INT);

INSERT INTO Orders (order_id, customer_id, product_id, order_date, quantity)
VALUES
    (1, 1, 10, '2020-06-10', 1),
    (2, 1, 20, '2020-07-01', 1),
    (3, 1, 30, '2020-07-08', 2),
    (4, 2, 10, '2020-06-15', 2),
    (5, 2, 40, '2020-07-01', 10),
    (6, 3, 20, '2020-06-24', 2),
    (7, 3, 30, '2020-06-25', 2),
    (9, 3, 30, '2020-05-08', 3);

select c.customer_id, c.name
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
join product p on p.product_id=o.product_id
group by c.customer_id, c.name
having sum(case when month(order_date)=6 then p.price*o.quantity end)>=100 and
 sum(case when month(order_date)=7 then p.price*o.quantity end)>=100;

-- Q29.
CREATE TABLE TVProgram (
    program_date DATE,
    content_id INT,
    channel VARCHAR(255),
    PRIMARY KEY (program_date, content_id)
);

CREATE TABLE Content (
    content_id int PRIMARY KEY,
    title VARCHAR(255),
    Kids_content ENUM('Y', 'N'),
    content_type VARCHAR(255)
);

INSERT INTO TVProgram (program_date, content_id, channel)
VALUES
    ('2020-06-10 08:00', 1, 'LC-Channel'),
    ('2020-05-11 12:00', 2, 'LC-Channel'),
    ('2020-05-12 12:00', 3, 'LC-Channel'),
    ('2020-05-13 14:00', 4, 'Disney Ch'),
    ('2020-06-18 14:00', 4, 'Disney Ch'),
    ('2020-07-15 16:00', 5, 'Disney Ch');

INSERT INTO Content (content_id, title, Kids_content, content_type)
VALUES
    (1, 'Leetcode Movie', 'N', 'Movies'),
    (2, 'Alg. for Kids', 'Y', 'Series'),
    (3, 'Database Sols', 'N', 'Series'),
    (4, 'Aladdin', 'Y', 'Movies'),
    (5, 'Cinderella', 'Y', 'Movies');

select distinct(title) from content c
join tvprogram t on c.content_id=t.content_id
where c.kids_content='Y' and 
month(t.program_date)=6 and
c.content_type='movies';

-- Q30.
CREATE TABLE NPV (
    id INT,
    year INT,
    npv INT,
    PRIMARY KEY (id, year)
);
CREATE TABLE Queries (
    id INT,
    year INT,
    PRIMARY KEY (id, year)
);

INSERT INTO NPV (id, year, npv)
VALUES
    (1, 2018, 100),
    (7, 2020, 30),
    (13, 2019, 40),
    (1, 2019, 113),
    (2, 2008, 121),
    (3, 2009, 12),
    (11, 2020, 99),
    (7, 2019, 0);

INSERT INTO Queries (id, year)
VALUES
    (1, 2019),
    (2, 2008),
    (3, 2009),
    (7, 2018),
    (7, 2019),
    (7, 2020),
    (13, 2019);

select q.id,q.year,
coalesce(n.npv,0)as npv 
from queries q
left join npv n on q.id=n.id
and q.year=n.year;

-- Q31. Question is same as 30
select q.id,q.year,
coalesce(n.npv,0)as npv 
from queries q
left join npv n on q.id=n.id
and q.year=n.year;

-- Q32.
create table employees(
id int primary key,
name varchar(25)
);
create table EmployeeUNI(
id int,
unique_id int,
primary key(id,unique_id)
);

INSERT INTO Employees (id, name)
VALUES
    (1, 'Alice'),
    (7, 'Bob'),
    (11, 'Meir'),
    (90, 'Winston'),
    (3, 'Jonathan');

INSERT INTO EmployeeUNI (id, unique_id)
VALUES
    (3, 1),
    (11, 2),
    (90, 3);

select u.unique_id, e.name 
from Employees e
left join EmployeeUNI u
on e.id=u.id;

-- Q33.
create table users(
id int primary key,
name varchar(25)
);

create table resides(
id int primary key,
user_id int,
distance int
);

INSERT INTO Users (id, name)
VALUES
    (1, 'Alice'),
    (2, 'Bob'),
    (3, 'Alex'),
    (4, 'Donald'),
    (7, 'Lee'),
    (13, 'Jonathan'),
    (19, 'Elvis');

INSERT INTO Rides (id, user_id, distance)
VALUES
    (1, 1, 120),
    (2, 2, 317),
    (3, 3, 222),
    (4, 7, 100),
    (5, 13, 312),
    (6, 19, 50),
    (7, 7, 120),
    (8, 19, 400),
    (9, 7, 230);

select u.name,coalesce(sum(r.distance),0) 
as travelled_distance from users u
left join rides r on u.id=r.user_id
group by u.id
order by travelled_distance desc,name asc;

-- Q34. This question is incomplete.

-- Q35.
CREATE TABLE Movies (
    movie_id INT PRIMARY KEY,
    title VARCHAR(255)
);
CREATE TABLE Users (
    user_id INT PRIMARY KEY,
    name VARCHAR(255)
);
CREATE TABLE MovieRating (
    movie_id INT,
    user_id INT,
    rating INT,
    created_at DATE,
    PRIMARY KEY (movie_id, user_id)
);

INSERT INTO Movies (movie_id, title)
VALUES
    (1, 'Avengers'),
    (2, 'Frozen 2'),
    (3, 'Joker');

INSERT INTO Users (user_id, name)
VALUES
    (1, 'Daniel'),
    (2, 'Monica'),
    (3, 'Maria'),
    (4, 'James');

INSERT INTO MovieRating (movie_id, user_id, rating, created_at)
VALUES
    (1, 1, 3, '2020-01-12'),
    (1, 2, 4, '2020-02-11'),
    (1, 3, 2, '2020-02-12'),
    (1, 4, 1, '2020-01-01'),
    (2, 1, 5, '2020-02-17'),
    (2, 2, 2, '2020-02-01'),
    (2, 3, 2, '2020-03-01'),
    (3, 1, 3, '2020-02-22'),
    (3, 2, 4, '2020-02-25');

-- trying to find user who has rated the greatest number of movies.

select u.name from users u
join movierating mr on u.user_id=mr.user_id
GROUP BY u.name
ORDER BY COUNT(u.name) DESC,name
limit 1;
-- Ans:Daniel has rated most number of movies.
-- trying to find the movie name with the highest average rating in February 2020

select m.title from movies m
join movierating mr on m.movie_id=mr.movie_id
where mr.created_at>='2020-02-01' AND mr.created_at < '2020-03-01'
group by m.title
order by avg(mr.rating) desc,m.title
limit 1;

-- Q36.
select u.name,coalesce(sum(r.distance),0) 
as travelled_distance from users u
left join rides r on u.id=r.user_id
group by u.id
order by travelled_distance desc,name asc;

-- Q37.
select u.unique_id, e.name from employees e
left join employeeuni u
on e.id=u.id;

-- Q38.
create table departments(
id int primary key,
name varchar(25)
);
create table students(
id int primary key,
name varchar (25),
department_id int
);
INSERT INTO Departments (id, name)
VALUES
(1, 'Electrical Engineering'),
(7, 'Computer Engineering'),
(13, 'Business Administration');
INSERT INTO Students (id, name, department_id)
VALUES
(23, 'Alice', 1),
(1, 'Bob', 7),
(5, 'Jennifer', 13),
(2, 'John', 14),
(4, 'Jasmine', 77),
(3, 'Steve', 74),
(6, 'Luis', 1),
(8, 'Jonathan', 7),
(7, 'Daiana', 33),
(11, 'Madelynn', 1);

select s.id,s.name from students s
left join departments d on s.department_id=d.id
where not exists
(select * from departments d 
where s.department_id = d.id);

-- Q39.
create table calls(
from_id int,
to_id int,
duration int
);
INSERT INTO Calls (from_id, to_id, duration)
VALUES
(1, 2, 59),
(2, 1, 11),
(1, 3, 20),
(3, 4, 100),
(3, 4, 200),
(3, 4, 200),
(4, 3, 499);

select 
    least(from_id, to_id) AS person1,
    greatest(from_id, to_id) AS person2,
    count(*) as call_count, sum(duration) as total_duration
from calls
GROUP BY person1,person2;

-- Q40. 
CREATE TABLE Prices (
    product_id int,
    start_date date,
    end_date date,
    price int,
    PRIMARY KEY (product_id, start_date, end_date)
);
CREATE TABLE UnitsSold (
    product_id int,
    purchase_date date,
    units int
);
INSERT INTO Prices (product_id, start_date, end_date, price)
VALUES
    (1, '2019-02-17', '2019-02-28', 5),
    (1, '2019-03-01', '2019-03-22', 20),
    (2, '2019-02-01', '2019-02-20', 15),
    (2, '2019-02-21', '2019-03-31', 30);
INSERT INTO UnitsSold (product_id, purchase_date, units)
VALUES
    (1, '2019-02-25', 100),
    (1, '2019-03-01', 15),
    (2, '2019-02-10', 200),
    (2, '2019-03-22', 30);

select p.product_id,round(sum(p.price*u.units)/sum(u.units), 2) as average_price 
from prices p
join unitssold u
on p.product_id=u.product_id
AND u.purchase_date BETWEEN p.start_date AND p.end_date
group by p.product_id;

-- Q41.
create table warehouse(
name varchar(25),
product_id int,
units int,
primary key(name, product_id)
);
create table products(
product_id int primary key,
product_name varchar (25),
width int,
length int,
height int
);
INSERT INTO warehouse (name, product_id, units)
VALUES ('LCHouse1', 1, 1),
       ('LCHouse1', 2, 10),
       ('LCHouse1', 3, 5),
       ('LCHouse2', 1, 2),
       ('LCHouse2', 2, 2),
       ('LCHouse3', 4, 1);
INSERT INTO Products (product_id, product_name, Width, Length, Height)
VALUES
    (1, 'LC-TV', 5, 50, 40),
    (2, 'LC-KeyChain', 5, 5, 5),
    (3, 'LC-Phone', 2, 10, 10),
    (4, 'LC-T-Shirt', 4, 10, 20);

select w.name AS warehouse_name,
SUM((p.Width * p.Length * p.Height) * w.units) AS volume
FROM Warehouse w JOIN
Products p ON w.product_id = p.product_id
GROUP BY w.name;

-- Q42.
CREATE TABLE Sales (
    sale_date DATE,
    fruit ENUM('apples', 'oranges'),
    sold_num INT,
    PRIMARY KEY (sale_date, fruit)
);
INSERT INTO Sales (sale_date, fruit, sold_num)
VALUES
    ('2020-05-01', 'apples', 10),
    ('2020-05-01', 'oranges', 8),
    ('2020-05-02', 'apples', 15),
    ('2020-05-02', 'oranges', 15),
    ('2020-05-03', 'apples', 20),
    ('2020-05-03', 'oranges', 0),
    ('2020-05-04', 'apples', 15),
    ('2020-05-04', 'oranges', 16);

SELECT sale_date, 
SUM(case when fruit = 'apples' then sold_num else -sold_num end) AS diff
FROM Sales
GROUP BY sale_date;

-- Q43.
CREATE TABLE Activity (
    player_id INT,
    device_id INT,
    event_date DATE,
    games_played INT,
    PRIMARY KEY (player_id, event_date)
);
INSERT INTO Activity (player_id, device_id, event_date, games_played)
VALUES
    (1, 2, '2016-03-01', 5),
    (1, 2, '2016-03-02', 6),
    (2, 3, '2017-06-25', 1),
    (3, 1, '2016-03-02', 0),
    (3, 4, '2018-07-03', 5);

SELECT ROUND(
    SUM(CASE WHEN lag_event_date = DATE_ADD(event_date, INTERVAL -1 DAY) THEN 1 ELSE 0 END)
    / COUNT(DISTINCT player_id),
    2) AS fraction
FROM (
    SELECT player_id, 
           event_date,
           LAG(event_date) OVER (PARTITION BY player_id ORDER BY event_date) AS lag_event_date
    FROM Activity
) subquery;

-- Q44.
create table employee(
id int primary key,
name varchar (25),
department varchar(25),
managerid int
);
INSERT INTO Employee (id, name, department, managerId)
VALUES
    (101, 'John', 'A', NULL),
    (102, 'Dan', 'A', 101),
    (103, 'James', 'A', 101),
    (104, 'Amy', 'A', 101),
    (105, 'Anne', 'A', 101),
    (106, 'Ron', 'B', 101);

SELECT M.name
FROM Employee M
JOIN Employee D ON M.id = D.managerId
GROUP BY M.name, M.id
HAVING COUNT(DISTINCT D.id) >= 5;
 
-- Q45.
CREATE TABLE Student (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(255),
    gender VARCHAR(10),
    dept_id INT
    );
CREATE TABLE Department (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(255)
);
INSERT INTO Student (student_id, student_name, gender, dept_id)
VALUES
    (1, 'Jack', 'M', 1),
    (2, 'Jane', 'F', 1),
    (3, 'Mark', 'M', 2);
INSERT INTO Department (dept_id, dept_name)
VALUES
    (1, 'Engineering'),
    (2, 'Science'),
    (3, 'Law');

select d.dept_name,count(s.dept_id) as student_number from department d
left join student s on d.dept_id=s.dept_id
group by d.dept_id
ORDER BY student_number DESC, d.dept_name;
 
 -- Q46.
create table customer(
customer_id int,
product_key int
);
create table prod(
product_key int primary key
);
INSERT INTO Customer(customer_id, product_key)
VALUES
    (1, 5),
    (2, 6),
    (3, 5),
    (3, 6),
    (1, 6);
INSERT INTO Prod (product_key)
VALUES
    (5),
    (6);

SELECT customer_id
FROM Customer
GROUP BY customer_id
HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM prod);

-- Q47.
create table project(
project_id int,
employee_id int,
primary key(project_id,employee_id),
foreign key (employee_id) references emp(employee_id)
);
create table emp(
employee_id int primary key,
name varchar(35),
experience_years int
);
INSERT INTO Project (project_id, employee_id)
VALUES
    (1, 1),
    (1, 2),
    (1, 3),
    (2, 1),
    (2, 4);
INSERT INTO emp (employee_id, name, experience_years)
VALUES
    (1, 'Khaled', 3),
    (2, 'Ali', 2),
    (3, 'John', 3),
    (4, 'Doe', 2);

select p.project_id,p.employee_id from Project p
join emp e on p.employee_id=e.employee_id
where e.experience_years =
(select max(experience_years) from emp)
group by p.project_id,p.employee_id 
order by p.project_id;

-- Q48.
-- Incomplete question given.
 
-- Q49.
CREATE TABLE Enrollments (
    student_id INT,
    course_id INT,
    grade INT,
    PRIMARY KEY (student_id, course_id)
);
INSERT INTO Enrollments (student_id, course_id, grade) VALUES
    (2, 2, 95),
    (2, 3, 95),
    (1, 1, 90),
    (1, 2, 99),
    (3, 1, 80),
    (3, 2, 75),
    (3, 3, 82);

WITH RankedGrades AS (
  SELECT student_id, course_id, grade,
        RANK() OVER (PARTITION BY student_id ORDER BY grade DESC, course_id ASC) AS grade_rank
    FROM Enrollments
) SELECT student_id, course_id, grade
FROM RankedGrades WHERE grade_rank = 1
ORDER BY student_id;

-- Q50.
-- Incomplete question.
